{"ast":null,"code":"import _objectSpread from \"C:\\\\superhero-react\\\\src\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"C:\\\\superhero-react\\\\src\\\\src\\\\pages\\\\upload\\\\Upload.js\";\nimport React, { Component } from \"react\";\nimport Dropzone from \"../dropzone/Dropzone\";\nimport \"./Upload.css\";\nimport Progress from \"../progress/Progress\";\nimport { SplitButton, MenuItem, Row, Form, Col } from 'react-bootstrap';\nimport classes from \"../SignIn\";\nimport Button from \"react-bootstrap/esm/Button\";\n\nclass Upload extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      files: [],\n      uploading: false,\n      uploadProgress: {},\n      successfullUploaded: false\n    };\n    this.onFilesAdded = this.onFilesAdded.bind(this);\n    this.uploadFiles = this.uploadFiles.bind(this);\n    this.sendRequest = this.sendRequest.bind(this);\n    this.renderActions = this.renderActions.bind(this);\n  }\n\n  onFilesAdded(files) {\n    this.setState(prevState => ({\n      files: prevState.files.concat(files)\n    }));\n  }\n\n  async uploadFiles() {\n    this.setState({\n      uploadProgress: {},\n      uploading: true\n    });\n    const promises = [];\n    this.state.files.forEach(file => {\n      promises.push(this.sendRequest(file));\n    });\n\n    try {\n      await Promise.all(promises);\n      this.setState({\n        successfullUploaded: true,\n        uploading: false\n      });\n    } catch (e) {\n      // Not Production ready! Do some error handling here instead...\n      this.setState({\n        successfullUploaded: true,\n        uploading: false\n      });\n    }\n  }\n\n  sendRequest(file) {\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n      req.upload.addEventListener(\"progress\", event => {\n        if (event.lengthComputable) {\n          const copy = _objectSpread({}, this.state.uploadProgress);\n\n          copy[file.name] = {\n            state: \"pending\",\n            percentage: event.loaded / event.total * 100\n          };\n          this.setState({\n            uploadProgress: copy\n          });\n        }\n      });\n      req.upload.addEventListener(\"load\", event => {\n        const copy = _objectSpread({}, this.state.uploadProgress);\n\n        copy[file.name] = {\n          state: \"done\",\n          percentage: 100\n        };\n        this.setState({\n          uploadProgress: copy\n        });\n        resolve(req.response);\n      });\n      req.upload.addEventListener(\"error\", event => {\n        const copy = _objectSpread({}, this.state.uploadProgress);\n\n        copy[file.name] = {\n          state: \"error\",\n          percentage: 0\n        };\n        this.setState({\n          uploadProgress: copy\n        });\n        reject(req.response);\n      });\n      const formData = new FormData();\n      formData.append(\"file\", file, file.name);\n      req.open(\"POST\", \"http://localhost:8000/upload\");\n      req.send(formData);\n    });\n  }\n\n  renderProgress(file) {\n    const uploadProgress = this.state.uploadProgress[file.name];\n\n    if (this.state.uploading || this.state.successfullUploaded) {\n      return React.createElement(\"div\", {\n        className: \"ProgressWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(Progress, {\n        progress: uploadProgress ? uploadProgress.percentage : 0,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        className: \"CheckIcon\",\n        alt: \"done\",\n        src: \"baseline-check_circle_outline-24px.svg\",\n        style: {\n          opacity: uploadProgress && uploadProgress.state === \"done\" ? 0.5 : 0\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }));\n    }\n  }\n\n  renderActions() {\n    if (this.state.successfullUploaded) {\n      return React.createElement(\"button\", {\n        onClick: () => this.setState({\n          files: [],\n          successfullUploaded: false\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"Clear\");\n    } else {\n      return React.createElement(\"button\", {\n        disabled: this.state.files.length < 0 || this.state.uploading,\n        onClick: this.uploadFiles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"Upload\");\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Botton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"TopSpace\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      as: Row,\n      controlId: \"formHorizontalEmail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      column: true,\n      sm: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Total Price:\"), React.createElement(Col, {\n      sm: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(Form.Control, {\n      type: \"Price\",\n      placeholder: \"Total Price\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }))), React.createElement(Form.Group, {\n      as: Row,\n      controlId: \"formGridState\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      as: \"legend\",\n      column: true,\n      sm: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Store\"), React.createElement(Col, {\n      sm: 10,\n      className: classes.checkBox,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(Form.Check, {\n      type: \"checkbox\",\n      label: \"Rami Levi\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    })), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(Form.Check, {\n      type: \"checkbox\",\n      label: \"Shufersal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    })), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(Form.Check, {\n      type: \"checkbox\",\n      label: \"Tiv Taam\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    })))), React.createElement(Form.Group, {\n      as: Row,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"Upload\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"Title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \"Upload Files\"), React.createElement(\"div\", {\n      className: \"Content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(Dropzone, {\n      onFilesAdded: this.onFilesAdded,\n      disabled: this.state.uploading || this.state.successfullUploaded,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"Files\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, this.state.files.map(file => {\n      return React.createElement(\"div\", {\n        key: file.name,\n        className: \"Row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"Filename\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, file.name), this.renderProgress(file));\n    }))), React.createElement(\"div\", {\n      className: \"Actions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, this.renderActions())));\n  }\n\n}\n\nexport default Upload;","map":{"version":3,"sources":["C:/superhero-react/src/src/pages/upload/Upload.js"],"names":["React","Component","Dropzone","Progress","SplitButton","MenuItem","Row","Form","Col","classes","Button","Upload","constructor","props","state","files","uploading","uploadProgress","successfullUploaded","onFilesAdded","bind","uploadFiles","sendRequest","renderActions","setState","prevState","concat","promises","forEach","file","push","Promise","all","e","resolve","reject","req","XMLHttpRequest","upload","addEventListener","event","lengthComputable","copy","name","percentage","loaded","total","response","formData","FormData","append","open","send","renderProgress","opacity","length","render","checkBox","map"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Dropzone from \"../dropzone/Dropzone\";\r\nimport \"./Upload.css\";\r\nimport Progress from \"../progress/Progress\";\r\nimport {SplitButton, MenuItem, Row, Form, Col} from 'react-bootstrap';\r\nimport classes from \"../SignIn\";\r\nimport Button from \"react-bootstrap/esm/Button\";\r\nclass Upload extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            files: [],\r\n            uploading: false,\r\n            uploadProgress: {},\r\n            successfullUploaded: false\r\n        };\r\n\r\n        this.onFilesAdded = this.onFilesAdded.bind(this);\r\n        this.uploadFiles = this.uploadFiles.bind(this);\r\n        this.sendRequest = this.sendRequest.bind(this);\r\n        this.renderActions = this.renderActions.bind(this);\r\n    }\r\n\r\n    onFilesAdded(files) {\r\n        this.setState(prevState => ({\r\n            files: prevState.files.concat(files)\r\n        }));\r\n    }\r\n\r\n    async uploadFiles() {\r\n        this.setState({ uploadProgress: {}, uploading: true });\r\n        const promises = [];\r\n        this.state.files.forEach(file => {\r\n            promises.push(this.sendRequest(file));\r\n        });\r\n        try {\r\n            await Promise.all(promises);\r\n\r\n            this.setState({ successfullUploaded: true, uploading: false });\r\n        } catch (e) {\r\n            // Not Production ready! Do some error handling here instead...\r\n            this.setState({ successfullUploaded: true, uploading: false });\r\n        }\r\n    }\r\n\r\n    sendRequest(file) {\r\n        return new Promise((resolve, reject) => {\r\n            const req = new XMLHttpRequest();\r\n\r\n            req.upload.addEventListener(\"progress\", event => {\r\n                if (event.lengthComputable) {\r\n                    const copy = { ...this.state.uploadProgress };\r\n                    copy[file.name] = {\r\n                        state: \"pending\",\r\n                        percentage: (event.loaded / event.total) * 100\r\n                    };\r\n                    this.setState({ uploadProgress: copy });\r\n                }\r\n            });\r\n\r\n            req.upload.addEventListener(\"load\", event => {\r\n                const copy = { ...this.state.uploadProgress };\r\n                copy[file.name] = { state: \"done\", percentage: 100 };\r\n                this.setState({ uploadProgress: copy });\r\n                resolve(req.response);\r\n            });\r\n\r\n            req.upload.addEventListener(\"error\", event => {\r\n                const copy = { ...this.state.uploadProgress };\r\n                copy[file.name] = { state: \"error\", percentage: 0 };\r\n                this.setState({ uploadProgress: copy });\r\n                reject(req.response);\r\n            });\r\n\r\n            const formData = new FormData();\r\n            formData.append(\"file\", file, file.name);\r\n\r\n            req.open(\"POST\", \"http://localhost:8000/upload\");\r\n            req.send(formData);\r\n        });\r\n    }\r\n\r\n    renderProgress(file) {\r\n        const uploadProgress = this.state.uploadProgress[file.name];\r\n        if (this.state.uploading || this.state.successfullUploaded) {\r\n            return (\r\n                <div className=\"ProgressWrapper\">\r\n                    <Progress progress={uploadProgress ? uploadProgress.percentage : 0} />\r\n                    <img\r\n                        className=\"CheckIcon\"\r\n                        alt=\"done\"\r\n                        src=\"baseline-check_circle_outline-24px.svg\"\r\n                        style={{\r\n                            opacity:\r\n                                uploadProgress && uploadProgress.state === \"done\" ? 0.5 : 0\r\n                        }}\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderActions() {\r\n        if (this.state.successfullUploaded) {\r\n            return (\r\n                <button\r\n                    onClick={() =>\r\n                        this.setState({ files: [], successfullUploaded: false })\r\n                    }\r\n                >\r\n                    Clear\r\n                </button>\r\n            );\r\n        } else {\r\n            return (\r\n                <button\r\n                    disabled={this.state.files.length < 0 || this.state.uploading}\r\n                    onClick={this.uploadFiles}\r\n                >\r\n                    Upload\r\n                </button>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Botton\" >\r\n                <div className=\"TopSpace\">\r\n                    <Form >\r\n                        <Form.Group as={Row} controlId=\"formHorizontalEmail\">\r\n                            <Form.Label column sm={2}>\r\n                                Total Price:\r\n                            </Form.Label>\r\n                            <Col sm={10}>\r\n                                <Form.Control type=\"Price\" placeholder=\"Total Price\" />\r\n                            </Col>\r\n                        </Form.Group>\r\n                        <Form.Group as={Row} controlId=\"formGridState\">\r\n                            <Form.Label as=\"legend\" column sm={2} >Store</Form.Label>\r\n                            <Col sm={10} className={classes.checkBox}>\r\n                                <Row>\r\n                                    <Form.Check type=\"checkbox\" label=\"Rami Levi\" />\r\n                                </Row>\r\n                                <Row>\r\n                                    <Form.Check type=\"checkbox\" label=\"Shufersal\" />\r\n                                </Row>\r\n                                <Row>\r\n                                    <Form.Check type=\"checkbox\" label=\"Tiv Taam\" />\r\n                                </Row>\r\n                            </Col>\r\n                        </Form.Group>\r\n\r\n\r\n                        <Form.Group as={Row}>\r\n\r\n                        </Form.Group>\r\n                    </Form>\r\n                </div>\r\n                <div className=\"Upload\">\r\n                    <span className=\"Title\">Upload Files</span>\r\n                    <div className=\"Content\">\r\n                        <div>\r\n                            <Dropzone\r\n                                onFilesAdded={this.onFilesAdded}\r\n                                disabled={this.state.uploading || this.state.successfullUploaded}\r\n                            />\r\n                        </div>\r\n                        <div className=\"Files\">\r\n                            {this.state.files.map(file => {\r\n                                return (\r\n                                    <div key={file.name} className=\"Row\">\r\n                                        <span className=\"Filename\">{file.name}</span>\r\n                                        {this.renderProgress(file)}\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"Actions\">{this.renderActions()}</div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Upload;"]},"metadata":{},"sourceType":"module"}